"""empty message

Revision ID: 2799ce81d23d
Revises: 91e4c38a7717
Create Date: 2021-05-18 18:36:13.524819

"""
import datetime

from alembic import op
import sqlalchemy as sa



# revision identifiers, used by Alembic.
revision = '2799ce81d23d'
down_revision = '91e4c38a7717'
branch_labels = None
depends_on = None

public_key = "-----BEGIN PUBLIC KEY-----\nMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAz7rr5CsFM7rHMFs7uKIdcczn0uL4ebRMvH8pihrg1tW/fp5Q+5ktltoBTfIaVDrXGF4DiCuzLsuvTG5fGElKEPPcpNqaCzD8Y1v9r3tfkoPT3Bd5KbF9f6eIwrGERMTs1kv7665pliwehz91nAB9DMqqSyjyKY3tpSIaPKzJKUMsKJjPi9QAS167ylEBlr5PECG4slWLDAtSizoiA3fZ7fpngfNr4H6b2iQwRtPEV/EnSg1N3Oj1x8ktJPwbReKprHGiEDlqdyT6j58l/I+9ihR6ettkMVCq7Ho/bsIrwm5gP0PjJRvaD5Flsze7P4gQT37D1c5nbLR+K6/T0QTiyQIDAQAB\n-----END PUBLIC KEY-----"

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    # updated 5/2021, jfs -- updated to store a default public key for existing tenants;
    # also, we need to first create the status field as nullable so that we can apply the migration to a db
    # with existing tenants, then add the status value, and finally alter the table so that the status field is
    # not nullable.
    now = datetime.datetime.utcnow()
    op.add_column('tenants', sa.Column('public_key', sa.String(length=10000), nullable=True))
    # update existing rows with a valid public key --
    op.execute(f"UPDATE tenants set public_key = '{public_key}';")

    # we do the same for the status; we set it to inactive here
    e = sa.Enum('draft', 'active', 'inactive', name='tenantstatustypes')
    e.create(op.get_bind())

    # new, non-nullable columns. we add them as nullable first to allow for existing rows that do not have
    # these columns
    op.add_column('site', sa.Column('create_time', sa.DateTime(), nullable=True))
    op.add_column('site', sa.Column('created_by', sa.String(length=120), nullable=True))
    op.add_column('site', sa.Column('last_update_time', sa.DateTime(), nullable=True))
    op.add_column('site', sa.Column('last_updated_by', sa.String(length=120), nullable=True))
    op.execute(f"UPDATE site set create_time = '{now}';")
    op.execute(f"UPDATE site set last_update_time = '{now}';")
    op.execute(f"UPDATE site set created_by = 'tenants@admin';")
    op.execute(f"UPDATE site set last_updated_by = 'tenants@admin';")

    op.add_column('tenants', sa.Column('status', e, nullable=True))
    op.add_column('tenants', sa.Column('created_by', sa.String(length=120), nullable=True))
    op.add_column('tenants', sa.Column('last_updated_by', sa.String(length=120), nullable=True))

    op.execute(f"UPDATE tenants set status = 'inactive';")
    op.execute(f"UPDATE tenants set public_key = '{public_key}';")
    op.execute(f"UPDATE tenants set created_by = 'tenants@admin';")
    op.execute(f"UPDATE tenants set last_updated_by = 'tenants@admin';")

    # finally, modify the columns so that they are not nullable
    op.alter_column('site', sa.Column('create_time', sa.DateTime(), nullable=False))
    op.alter_column('site', sa.Column('created_by', sa.String(length=120), nullable=False))
    op.alter_column('site', sa.Column('last_update_time', sa.DateTime(), nullable=False))
    op.alter_column('site', sa.Column('last_updated_by', sa.String(length=120), nullable=False))

    op.alter_column('tenants', sa.Column('status', e, nullable=False))
    op.alter_column('tenants', sa.Column('created_by', sa.String(length=120), nullable=False))
    op.alter_column('tenants', sa.Column('last_updated_by', sa.String(length=120), nullable=False))

    op.create_table('tenants_history',
                    sa.Column('id', sa.Integer(), nullable=False),
                    sa.Column('tenant_id', sa.String(length=50), nullable=False),
                    sa.Column('update_time', sa.DateTime(), nullable=False),
                    sa.Column('updated_by', sa.String(length=120), nullable=False),
                    sa.Column('updates_as_json', sa.String(length=10000), nullable=False),
                    sa.PrimaryKeyConstraint('id'),
                    sa.ForeignKeyConstraint(['tenant_id'], ['tenants.tenant_id'])
                    )


    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_constraint(None, 'tenants', type_='unique')
    op.drop_column('tenants', 'status')
    op.drop_column('tenants', 'public_key')
    # ### end Alembic commands ###
