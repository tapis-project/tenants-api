openapi: "3.0.2"

info:
  title: "Tenants API"
  description: "Manage Tapis Tenants."
  version: "1"
  termsOfService: "https://tapis-project.org"
  contact:
    name: "Tenants API"
    url: "https://tapis-project.org"
    email: "cicsupport@tacc.utexas.edu"
  license:
    name: "BSD 3"
    url: "https://github.com/tapis-project/tenants-api"

servers:
- url: http://localhost:5000
  description: Local Development

#security:
#  - wso2jwtDevAuth: []
#  - nonce: []


paths:
  /tenants:
    get:
      tags:
      - Tenants
      summary: List tenants.
      description: List tenants.
      operationId: list_tenants
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfTenants'
    post:
      tags:
      - Tenants
      summary: Create a tenant.
      description: Create a tenant.
      operationId: create_tenant
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Tenant'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Tenant'

  /tenants/{tenant_id}:
    get:
      tags:
      - Tenants
      summary: Get tenant details
      description: Get details of a specific tenant by its id.
      operationId: getTenant
      parameters:
      - name: tenant_id
        in: path
        description: Unique ID of the tenant
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Tenant'
    delete:
      tags:
      - Tenants
      summary: Delete a tenant
      description: Permenantly delete a tenant.
      operationId: deleteTenant
      parameters:
      - name: tenant_id
        in: path
        description: Unique ID of the tenant
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]

  /ldaps:
    get:
      tags:
      - Tenants
      - Ldaps
      summary: List ldaps
      description: List ldaps
      operationId: list_ldaps
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfLDAPs'
    post:
      tags:
      - Tenants
      - Ldaps
      operationId: create_ldap
      summary: Create an ldap
      description: Create an ldap
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewLDAP'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/LDAP'

  /ldaps/{ldap_id}:
    get:
      tags:
      - Tenants
      - Ldaps
      summary: Get ldap details
      description: Get details of a specific ldap by its id.
      operationId: getLdap
      parameters:
      - name: ldap_id
        in: path
        description: Unique ID of the ldap
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/LDAP'
    delete:
      tags:
      - Tenants
      - Ldaps
      summary: Delete ldap
      description: Permenantly delete an ldap.
      operationId: deleteLdap
      parameters:
      - name: ldap_id
        in: path
        description: Unique ID of the ldap
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]

  /owners:
    get:
      tags:
      - Tenants
      - Owners
      summary: List owners
      description: List owners
      operationId: list_owners
      x-swagger-router-controller: connexContr
      parameters:
      - name: limit
        in: query
        description: limit the number of records returned.
        schema:
          type: integer
      - name: offset
        in: query
        description: index (offset) to start list.
        schema:
          type: integer
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/arrayOfOwners'
    post:
      tags:
      - Tenants
      - Owners
      summary: Create an owner
      description: Create an owner
      operationId: create_owner
      x-swagger-router-controller: connexContr
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Owner'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Owner'

  /owners/{email}:
    get:
      tags:
      - Tenants
      - Owners
      summary: Get owner details
      description: Get details of a specific owner by its email address.
      operationId: getOwner
      parameters:
      - name: email
        in: path
        description: Email address of the owner
        required: true
        schema:
          type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    $ref: '#/components/schemas/Owner'
    delete:
      tags:
      - Tenants
      - Owners
      summary: Delete owner
      description: Permenantly delete an owner.
      operationId: deleteOwner
      parameters:
      - name: email
        in: path
        description: Email addres of the owner
        required: true
        schema:
          type: string

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BasicResponse'
                properties:
                  result:
                    type: string
                    nullable: true
                    enum: [null]


components:
  schemas:
    BasicResponse:
      type: object
      properties:
        version:
          type: string
          description: Version of the API
        message:
          type: string
          description: Brief description of the response
        status:
          type: string
          description: Whether the request was a success or failure.
          enum: [success, failure]

    NewLDAP:
      type: object
      properties:
        ldap_id:
          type: string
          description: Unique id for the LDAP object.
        url:
          type: string
          description: url to the LDAP
        user_dn:
          type: string
          description: base DN for users
        bind_dn:
          type: string
          description: DN used for binding to the LDAP.
        bind_credential:
          type: string
          description: Pointed to a Tapis credential for binding to the LDAP.
        account_type:
          type: string
          description: Whether this LDAP is used for service accounts or user accounts.
          enum: [service, user]
      required: [ldap_id, url, user_dn, bind_dn, bind_credential, account_type]


    LDAP:
      type: object
      properties:
        ldap_id:
          type: string
          description: Unique id for the LDAP object.
        url:
          type: string
          description: url to the LDAP
        user_dn:
          type: string
          description: base DN for users
        bind_dn:
          type: string
          description: DN used for binding to the LDAP.
        bind_credential:
          type: string
          description: Pointed to a Tapis credential for binding to the LDAP.
        account_type:
          type: string
          description: Whether this LDAP is used for service accounts or user accounts.
          enum: [service, user]

    arrayOfLDAPs:
      type: array
      items:
        $ref: '#/components/schemas/LDAP'

    Tenant:
      type: object
      properties:
        tenant_id:
          type: string
          description: The unique identifier for the tenant.
        base_url:
          type: string
          description: The base URL for the tenant.
        token_service:
          type: string
          description: The resolvable location of the token service for the tenant.
        security_kernel:
          type: string
          description: The resolvable location of the security kernel for the tenant.
        owner:
          type: string
          description: The email address of the primary owner and contact for the tenant.
        service_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for service accounts in the tenant.
        user_ldap_connection_id:
          type: string
          description: The unique identifier for the LDAP object for user accounts in the tenant.
        description:
          type: string
          description: A description of the tenant.
      required: [tenant_id, base_url, token_service, security_kernel, owner]

    arrayOfTenants:
      type: array
      items:
        $ref: '#/components/schemas/Tenant'

    Owner:
      type: object
      properties:
        name:
          type: string
          description: Full name of the owner.
        email:
          type: string
          description: Email address for the owner.
        institution:
          type: string
          description: The owner's institution.
      required: [name, email, institution]

    arrayOfOwners:
      type: array
      items:
        $ref: '#/components/schemas/Owner'


